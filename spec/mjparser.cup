package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append(" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, COMMA, PRINT, VOID, CONST, LBRACKET, RBRACKET;
terminal CLASS, NEW, IF, ELSE, WHILE, BREAK, CONTINUE, READ;
terminal AND, OR, EQ, NEQ, GT, GE, LT, LE;
terminal PLUS, MINUS, MUL, DIV;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHARACTER;
terminal Boolean BOOLEAN;

nonterminal Program, DeclList, MethodDeclList, Type, AssignOp, Constant, MethodDecl;
nonterminal ConstDecl, ConstDeclSemi, VarDecl, VarDeclSemi, ClassDecl, VarDeclList, ClassMethodDeclList, FormPars, FormParsList;
nonterminal Statement, StatementList, Matched, Unmatched, Expr, Condition, RelOp, AddOp, MulOp, Term, Factor, CondTerm, CondFact;

precedence left ELSE; 

Program ::= (Program) PROG IDENT DeclList LBRACE MethodDeclList RBRACE;

DeclList ::= (DeclListConst) DeclList ConstDeclSemi
			|
			(DeclListVar) DeclList VarDeclSemi
			|
			(DeclListClass) DeclList ClassDecl
			|
			/* epsilon */
			;

ConstDeclSemi ::= (ConstDeclSemi) ConstDecl SEMI;
			
ConstDecl ::= (ConstDeclChain) ConstDecl COMMA IDENT AssignOp Constant
					|
					(ConstDeclHead) CONST Type IDENT AssignOp Constant
					;
					
VarDeclSemi ::= (VarDeclSemi) VarDecl SEMI;

VarDecl ::= (VarDeclChainMatrix) VarDecl COMMA IDENT LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(VarDeclChainArr) VarDecl COMMA IDENT LBRACKET RBRACKET
				|
				(VarDeclChain) VarDecl COMMA IDENT
				|
				(VarDeclHeadMatrix) Type IDENT LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(VarDeclHeadArr) Type IDENT LBRACKET RBRACKET
				|
				(VarDeclHead) Type IDENT
				;

ClassDecl ::= (ClassDecl) CLASS IDENT LBRACE VarDeclList ClassMethodDeclList RBRACE;

ClassMethodDeclList ::= (ClassMethodDeclarations) LBRACE MethodDeclList RBRACE
					|
					(NoClassMethodDeclarations)/* epsilon */
					;

VarDeclList ::= (VarDeclarations) VarDeclList VarDeclSemi
				|
				(NoVarDeclarations) /* epsilon */
				;
				
Constant ::= (ConstNum) NUMBER
		|
		(ConstChar) CHARACTER
		|
		(ConstBool) BOOLEAN
		;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDeclarations) /* epsilon */
				;
				
MethodDecl ::= (MethodDeclType) Type IDENT LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
			|
			(MethodDeclVoid) VOID IDENT LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
			;
			
StatementList ::= (Statements) StatementList Statement
				|
				(NoStatements) /* epsilon */
				;
				
Statement ::= (MatchedStatement) Matched
			|
			(UnmatchedStatement) Unmatched
			;

Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement
			|
			(UnmatchedIfElse) IF LPAREN Condition RPAREN ELSE Unmatched
			;
				
Matched ::= (MatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Matched
			|
			(WhileStmt) WHILE LPAREN Condition RPAREN Statement
			|
			(ContinueStmt) CONTINUE SEMI
			|
			(BreakStmt) BREAK SEMI
			|
			(ReturnExpr) RETURN Expr SEMI
			|
			(ReturnNoExpr) RETURN SEMI 
			|
			(MatchedStatements) LBRACE StatementList RBRACE
			;
			
FormPars ::= (FormParamsList) FormParsList
			|
			(NoFormPars) /* epsilon */
			;
			
FormParsList ::= (FormParsChainMatrix) FormParsList COMMA Type IDENT LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(FormParsChainArr) FormParsList COMMA Type IDENT LBRACKET RBRACKET
				|
				(FormParsChain) FormParsList COMMA Type IDENT
				|
				(FormParsHeadMatrix) Type IDENT LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(FormParsHeadArr) Type IDENT LBRACKET RBRACKET
				|
				(FormParsHead) Type IDENT
				; 

Type ::= (Type) IDENT;

Condition ::= (MultCondition) Condition OR CondTerm
			|
			(SingleCondition) CondTerm
			;
			
CondTerm ::= (MultCondTerm) CondTerm AND CondFact
			|
			(SingleCondTerm) CondFact
			;
			
CondFact ::= (MultCondFact) Expr RelOp Expr
			|
			(SingleCondFact) Expr
			;
			
Expr ::= (AddOpTermExpr) Term AddOp Term
		|
		(TermExpr) Term
		;

Term ::= (MulOpFactorTerm) Factor MulOp Factor
		|
		(FactorTerm) Factor
		;
		
Factor ::= (NumConst) NUMBER
		|
		(CharConst) CHARACTER
		|
		(BoolConst) BOOLEAN
		;

AssignOp ::= (AssignOp) EQUAL;

RelOp ::= (RelOpEq) EQ
		|
		(RelOpNeq) NEQ
		|
		(RelOpGt) GT
		|
		(RelOpGe) GE
		|
		(RelOpLt) LT
		|
		(RelOpLe) LE
		;

AddOp ::= (AddOpPlus) PLUS
		|
		(AddOpMinus) MINUS
		;

MulOp ::= (MulOpMul) MUL
		|
		(MulOpDiv) DIV
		;
