package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append(" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, COMMA, PRINT, VOID, CONST, LBRACKET, RBRACKET, DOT;
terminal CLASS, NEW, IF, ELSE, WHILE, BREAK, CONTINUE, READ;
terminal AND, OR, EQ, NEQ, GT, GE, LT, LE;
terminal PLUS, MINUS, MUL, DIV, MOD, INCREMENT, DECREMENT, MAP, ARROW;
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHARACTER;
terminal Boolean BOOLEAN;

nonterminal DeclList, MethodDeclList, AssignOp;
nonterminal ConstDecl, ConstDeclSemi, VarDecl, VarDeclSemi, ClassDecl, VarDeclList, ClassMethodDeclList, FormPars, FormParsList;
nonterminal Statement, StatementList, Matched, Unmatched, RelOp, AddOp, MulOp;
nonterminal Label, ActPars, ActParsList, OptActParsInParens, DesignatorStatement;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodType, Term, Factor, Expr, Constant, Condition, CondFact, CondTerm;

precedence left ELSE; 

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclList ::= (DeclListConst) DeclList ConstDeclSemi
			|
			(DeclListVar) DeclList VarDeclSemi
			|
			(DeclListClass) DeclList ClassDecl
			|
			/* epsilon */
			;

ConstDeclSemi ::= (ConstDeclSemi) ConstDecl SEMI;
			
ConstDecl ::= (ConstDeclChain) ConstDecl COMMA IDENT:constName AssignOp Constant
					|
					(ConstDeclHead) CONST Type IDENT:constName AssignOp Constant
					;
					
VarDeclSemi ::= (VarDeclSemi) VarDecl SEMI;

VarDecl ::= (VarDeclChainMatrix) VarDecl COMMA IDENT:varName LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(VarDeclChainArr) VarDecl COMMA IDENT:varName LBRACKET RBRACKET
				|
				(VarDeclChain) VarDecl COMMA IDENT:varName
				|
				(VarDeclHeadMatrix) Type IDENT:varName LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(VarDeclHeadArr) Type IDENT:varName LBRACKET RBRACKET
				|
				(VarDeclHead) Type IDENT:varName
				|
				(ErrorVarDecl) error:l
				{: parser.report_error("Sintaksna greska pri deklaracije promenljive u liniji " + lleft, null); :} 
				;

ClassDecl ::= (ClassDecl) CLASS IDENT:className LBRACE VarDeclList ClassMethodDeclList RBRACE;

ClassMethodDeclList ::= (ClassMethodDeclarations) LBRACE MethodDeclList RBRACE
					|
					(NoClassMethodDeclarations) /* epsilon */
					;

VarDeclList ::= (VarDeclarations) VarDeclList VarDeclSemi
				|
				(NoVarDeclarations) /* epsilon */
				;
				
Constant ::= (NumConst) NUMBER:number
		|
		(CharConst) CHARACTER:character
		|
		(BoolConst) BOOLEAN:bool
		;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDeclarations) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;
			
MethodTypeName ::= (MethodTypeName) MethodType:retType IDENT:methodName;
			
MethodType ::= (MethodTypeNotVoid) Type
			|
			(MethodTypeVoid) VOID
			;
			
StatementList ::= (Statements) StatementList Statement
				|
				(NoStatements) /* epsilon */
				;
				
Statement ::= (MatchedStatement) Matched
			|
			(UnmatchedStatement) Unmatched
			;

Unmatched ::= (UnmatchedIf) IF LPAREN Condition RPAREN Statement
			|
			(UnmatchedIfElse) IF LPAREN Condition RPAREN ELSE Unmatched
			;
				
Matched ::= (DesignatorStmt) DesignatorStatement SEMI
			|
			(MatchedIfElse) IF LPAREN Condition RPAREN Matched ELSE Matched
			|
			(WhileStmt) WHILE LPAREN Condition RPAREN Statement
			|
			(ContinueStmt) CONTINUE SEMI
			|
			(BreakStmt) BREAK SEMI
			|
			(ReturnExpr) RETURN Expr SEMI
			|
			(ReturnNoExpr) RETURN SEMI 
			|
			(ReadStmt) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStmtNum) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			|
			(PrintStmt) PRINT LPAREN Expr RPAREN SEMI
			|
			(MapStmt) Designator AssignOp Designator DOT MAP LPAREN IDENT ARROW Expr RPAREN SEMI
			|
			(MatchedStatements) LBRACE StatementList RBRACE
			;
			
FormPars ::= (FormParamsList) FormParsList
			|
			(NoFormPars) /* epsilon */
			;
			
FormParsList ::= (FormParsChainMatrix) FormParsList COMMA Type IDENT:parName LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(FormParsChainArr) FormParsList COMMA Type IDENT:parName LBRACKET RBRACKET
				|
				(FormParsChain) FormParsList COMMA Type IDENT:parName
				|
				(FormParsHeadMatrix) Type IDENT:parName LBRACKET RBRACKET LBRACKET RBRACKET
				|
				(FormParsHeadArr) Type IDENT:parName LBRACKET RBRACKET
				|
				(FormParsHead) Type IDENT:parName
				|
				(ErrorFormPars) error:l
				{: parser.report_error("Sintaksna greska pri navodjenju formalnog parametra funkcije u liniji " + lleft, null); :}
				; 

Type ::= (Type) IDENT:typeName;

DesignatorStatement ::= (DesignatorStmtAssign) Designator AssignOp Expr
					|
					(ErrorAssign) error:l
					{: parser.report_error("Sintaksna greska pri konstrukciji iskaza dodele u liniji " + lleft, null); :} 
					|
					(DesignatorStmtActPar) Designator OptActParsInParens
					|
					(DesignatorStmtIncr) Designator INCREMENT
					|
					(DesignatorStmtDecr) Designator DECREMENT
					;

Condition ::= (MultCondition) Condition OR CondTerm
			|
			(SingleCondition) CondTerm
			|
			(ErrorCond) error:l
			{: parser.report_error("Sintaksna greska pri logickom izrazu u liniji " + lleft, null); :} 
			;
			
CondTerm ::= (MultCondTerm) CondTerm AND CondFact
			|
			(SingleCondTerm) CondFact
			;
			
CondFact ::= (MultCondFact) Expr RelOp Expr
			|
			(SingleCondFact) Expr
			;
			
Expr ::= (AddOpTermExpr) Expr AddOp Term
		|
		(TermExprMinus) MINUS Term
		|
		(TermExpr) Term
		;

Term ::= (MulOpFactorTerm) Term:f1 MulOp Factor:f2
		|
		(FactorTerm) Factor
		;
		
Factor ::= (FuncCall) Designator LPAREN ActPars RPAREN
		|
		(FactorVar) Designator
		|
		(FactorConst) Constant
		|
		(ConstrFactorMatrix) NEW Type LBRACKET Expr RBRACKET LBRACKET Expr RBRACKET 
		|
		(ConstrFactorArr) NEW Type LBRACKET Expr RBRACKET
		|
		(ConstrFactorActPars) NEW Type OptActParsInParens
		|
		(FactorExpr) LPAREN Expr RPAREN
		;
		
OptActParsInParens ::= (OptActParams) LPAREN ActPars RPAREN;
							
ActPars ::= (ActualParams) ActParsList
			|
			(NoActualParams) /* epsilon */
			;
		
ActParsList ::= (MultActPars) ActParsList COMMA Expr
			|
			(SingleActPar) Expr
			; 

Designator ::= (DesignatorChainIdent) Designator DOT IDENT
			|
			(DesignatorChainExpr) Designator LBRACKET Expr RBRACKET
			|
			(DesignatorIdent) IDENT:name
			;

Label ::= (Label) IDENT;

AssignOp ::= (AssignOp) EQUAL;

RelOp ::= (RelOpEq) EQ
		|
		(RelOpNeq) NEQ
		|
		(RelOpGt) GT
		|
		(RelOpGe) GE
		|
		(RelOpLt) LT
		|
		(RelOpLe) LE
		;

AddOp ::= (AddOpPlus) PLUS
		|
		(AddOpMinus) MINUS
		;

MulOp ::= (MulOpMul) MUL
		|
		(MulOpDiv) DIV
		|
		(MulOpMod) MOD
		;
